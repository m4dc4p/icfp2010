// circuit output starts with
//    02120112100002120
// this is an illegal prefix.
0L: 
X0R0#X0R:
0L

// circuit output starts with
//    12122221020010011
// this is an illegal prefix.

1L:
1R0L0#0R1R,
X0R0#X0L:
1L

// checking node ( 1 , 0LX0#X0L )
// inconsistent output connection
//    ( X , 1R , 1L )
1R:
1R0R0#1L0R,
0LX0#X0L:
1R

// checking node ( 0 , X0L0#X0L )
// inconsistent input connection
//     ( 0L , X , 0R )
0L: 
X0L0#X0L:
0L

// checking node ( 0 , X0L0#X0R )
// inconsistent input connection
//    ( 0L , X , 0R )
0L: 
X0L0#X0R:
0L

// checking node ( 0 , X0R0#X0L )
// inconsistent input connection
//    ( 0R , 0L , 0R )
0L: 
X0R0#X0L:
0L

// checking node ( 0 , X1R0#X1R )
// link not found
//    1R
0L: 
X1R0#X1R:
0L

19L:
12R13R0#1R12R,
14R0L0#4R9L,
9R10R0#3L8L,
2L17R0#5L9R,
15R1L0#10R13R,
3L18R0#6L15L,
5L11R0#13L12L,
19R16R0#11R8R,
2R7R0#11L10L,
1R3R0#18L2L,
8R4L0#16L2R,
8L7L0#15R6R,
6R0R0#14L0L,
6L4R0#14R0R,
12L13L0#17L1L,
5R11L0#16R4L,
10L15L0#17R7R,
14L16L0#18R3R,
9L17L0#19R5R,
X18L0#X7L: 
19L

// checking node ( 5 , 3L18R0#6L15L )
// inconsistent input connection
//     ( 18R , 7L , 5R )
//
// Removed 9L17L0#19R5R

19L:
12R13R0#1R12R,
14R0L0#4R9L,
9R10R0#3L8L,
2L17R0#5L9R,
15R1L0#10R13R,
3L18R0#6L15L,
5L11R0#13L12L,
19R16R0#11R8R,
2R7R0#11L10L,
1R3R0#18L2L,
8R4L0#16L2R,
8L7L0#15R6R,
6R0R0#14L0L,
6L4R0#14R0R,
12L13L0#17L1L,
5R11L0#16R4L,
10L15L0#17R7R,
14L16L0#18R3R,
X18L0#X7L:
19L

// checking node ( 19 , X18L0#X7L )
// inconsistent input connection
//    ( X , 20L , 19L )
// Changed 19L to 20L

20L:
12R13R0#1R12R,
14R0L0#4R9L,
9R10R0#3L8L,
2L17R0#5L9R,
15R1L0#10R13R,
3L18R0#6L15L,
5L11R0#13L12L,
19R16R0#11R8R,
2R7R0#11L10L,
1R3R0#18L2L,
8R4L0#16L2R,
8L7L0#15R6R,
6R0R0#14L0L,
6L4R0#14R0R,
12L13L0#17L1L,
5R11L0#16R4L,
10L15L0#17R7R,
14L16L0#18R3R,
9L17L0#19R5R,
X18L0#X7L:
20L

// Changed 3L18R0#6L15L to 3L18R0#6L25L,
// checking node ( 5 , 3L18R0#6L25L )
// link not found
//    25L

19L:
12R13R0#1R12R,
14R0L0#4R9L,
9R10R0#3L8L,
2L17R0#5L9R,
15R1L0#10R13R,
3L18R0#6L15L,
5L11R0#13L12L,
19R16R0#11R8R,
2R7R0#11L10L,
1R3R0#18L2L,
8R4L0#16L2R,
8L7L0#15R6R,
6R0R0#14L0L,
6L4R0#14R0R,
12L13L0#17L1L,
5R11L0#16R4L,
10L15L0#17R7R,
14L16L0#18R3R,
9L17L0#19R5R,
X18L0#X7L:
19L

// Removed 9R10R0#3L8L, duplicated 2L17R0#5L9R,
// Checking node ( 2 , 2L17R0#5L9R )
// inconsistent input connection
//    ( 2L , 5L , 2L )

19L:
12R13R0#1R12R,
14R0L0#4R9L,
2L17R0#5L9R,
2L17R0#5L9R,
15R1L0#10R13R,
3L18R0#6L15L,
5L11R0#13L12L,
19R16R0#11R8R,
2R7R0#11L10L,
1R3R0#18L2L,
8R4L0#16L2R,
8L7L0#15R6R,
6R0R0#14L0L,
6L4R0#14R0R,
12L13L0#17L1L,
5R11L0#16R4L,
10L15L0#17R7R,
14L16L0#18R3R,
9L17L0#19R5R,
X18L0#X7L:
19L

1L:
X18L0#X7L:
1L

// Swapped
//
// 9L17L0#19R5R,
// X18L0#X7L:
// X18L0#X7L,
// 9L17L0#19R5R:
//
// checking node ( 5 , 3L18R0#6L15L )
// inconsistent input connection
//    ( 18R , 7L , 5R )

19L:
12R13R0#1R12R,
14R0L0#4R9L,
9R10R0#3L8L,
2L17R0#5L9R,
15R1L0#10R13R,
3L18R0#6L15L,
5L11R0#13L12L,
19R16R0#11R8R,
2R7R0#11L10L,
1R3R0#18L2L,
8R4L0#16L2R,
8L7L0#15R6R,
6R0R0#14L0L,
6L4R0#14R0R,
12L13L0#17L1L,
5R11L0#16R4L,
10L15L0#17R7R,
14L16L0#18R3R,
X18L0#X7L,
9L17L0#19R5R:
19L

// Swapped 3L18R0#6L15L,
//         19R16R0#11R8R,
// from 19R16R0#11R8R,
//        3L18R0#6L15L,
//
// checking node ( 3 , 2L17R0#5L9R )
// inconsistent output connection
//  ( 5L , 5L , 3L )


19L:
12R13R0#1R12R,
14R0L0#4R9L,
9R10R0#3L8L,
2L17R0#5L9R,
15R1L0#10R13R,
5L11R0#13L12L,
3L18R0#6L15L,
19R16R0#11R8R,
2R7R0#11L10L,
1R3R0#18L2L,
8R4L0#16L2R,
8L7L0#15R6R,
6R0R0#14L0L,
6L4R0#14R0R,
12L13L0#17L1L,
5R11L0#16R4L,
10L15L0#17R7R,
14L16L0#18R3R,
9L17L0#19R5R,
X18L0#X7L:
19L

// Removed 19s
//
// 19R16R0#11R8R,
// 9L17L0#19R5R,
//
// checking node ( 0 , 12R13R0#1R12R )
// inconsistent input connection
//    ( 12R , 0R , 0L )
//

18L:
12R13R0#1R12R,
14R0L0#4R9L,
9R10R0#3L8L,
2L17R0#5L9R,
15R1L0#10R13R,
3L18R0#6L15L,
5L11R0#13L12L,
2R7R0#11L10L,
1R3R0#18L2L,
8R4L0#16L2R,
8L7L0#15R6R,
6R0R0#14L0L,
6L4R0#14R0R,
12L13L0#17L1L,
5R11L0#16R4L,
10L15L0#17R7R,
14L16L0#18R3R,
X18L0#X7L: 
18L

// Changed 18L to 17L
// checking node ( 0 , 12R13R0#1R12R )
// inconsistent input connection
//    ( 12R , 0R , 0L )

17L:
12R13R0#1R12R,
14R0L0#4R9L,
9R10R0#3L8L,
2L17R0#5L9R,
15R1L0#10R13R,
3L18R0#6L15L,
5L11R0#13L12L,
2R7R0#11L10L,
1R3R0#18L2L,
8R4L0#16L2R,
8L7L0#15R6R,
6R0R0#14L0L,
6L4R0#14R0R,
12L13L0#17L1L,
5R11L0#16R4L,
10L15L0#17R7R,
14L16L0#18R3R,
X18L0#X7L: 
17L

1L:
X0L0#X0L:
1L

// Changed

19L:
12R13R0#1R12R,
14R0L0#4R9L,
9R10R0#3L8L,
2L17R0#5L9R,
15R1L0#10R13R,
3L18R0#6L15L,
5L11R0#13L12L,
19R16R0#11R8R,
2R7R0#11L10L,
1R3R0#18L2L,
8R4L0#16L2R,
8L7L0#15R6R,
6R0R0#14L0L,
6L4R0#14R0R,
12L13L0#17L1L,
5R11L0#16R4L,
10L15L0#17R7R,
14L16L0#18R3R,
9L17L0#19R5R,
X18L0#X7L: 
19L


19L:
12L13R0#1R12R,
14R0L0#4R9L,
9R10R0#3L8L,
2L17R0#5L9R,
15R1L0#10R13R,
3L18R0#6L15L,
5L11R0#13L12L,
19R16R0#11R8R,
2R7R0#11L10L,
1R3R0#18L2L,
8R4L0#16L2R,
8L7L0#15R6R,
6R0R0#14L0L,
6L4R0#14R0R,
12L13L0#17L1L,
5R11L0#16R4L,
10L15L0#17R7R,
14L16L0#18R3R,
9L17L0#19R5R,
X18L0#X7L: 
19L

0L: 
X0R0#X0R:
0L

// The trivial circuit
X: :X
// gives prefix
01202101210201202

// This circuit is equivalent to the trivial one; it just adds a disconnected
// gate
X: 0L0R0#0L0R: X
// gives prefix
01202101210201202

